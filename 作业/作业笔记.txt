1.写配置文件
	UserMapper.xml:这个是用来处理数据库的sql语句，通过namespace+id找到对应的sql操作数据库
		resultType：是返回值类型
	jdbc.properties:这个是sql的配置文件，用来给sqlMapConfig.xml文件赋值的
	log4j.properties:这个是用来给项目添加日志的
	sqlMapConfig.xml:这是处理整个项目的配置文件，
						properties:这个是引入配置文件的
						typeAliases：这个是用来起别名的
						plugins是配置插件的，拦截文件
						environemnt是项目的配置环境，这里可以配置sql的运行环境
						mappers:这个是引入配置文件的
	pom.xml:这个是用来引入jar包的
2.开始做项目
	1.为了区分好各个的作用，做了不同的包:
		mapper包：是链接UserMapper.xml文件的,也可以使用java注解的方式直接操作数据库
		pojo包:写与sql表对应的实体类的
		test包:写测试类的
	2.写个与数据库User表对应的实体类User，放入pojo包
		//由于我用的是通用mapper方式，所以的添加注解
			1.@Table(name = "user")也可以设置一个主键策略
			@Id
    		@GeneratedValue(strategy = GenerationType.IDENTITY)
    		2.在pom.xml上添加
    		<dependency> 
	    		<groupId>tk.mybatis</groupId> 
	    		<artifactId>mapper</artifactId> 
	    		<version>3.1.2</version>
    		</dependency>
    		3.在sqlMapConfig.xml文件插入
    		<plugins> <!--分页插件：如果有分页插件，要排在通用mapper之前--> <plugin interceptor="com.github.pagehelper.PageHelper">   <property name="dialect" value="mysql"/> </plugin> <plugin interceptor="tk.mybatis.mapper.mapperhelper.MapperInterceptor">  <!-- 通用Mapper接口，多个通用接口用逗号隔开 --> <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/> </plugin></plugins>

    		简单想想就是，首先有对应的jar包，在每个执行的方法之间插入方法，让实体类跟数据库表对应


	3.写个UserMapper链接Mybaits，操作数据库
	4.写UserTest操作数据库


	@Before
    public void before() throws IOException {
    	//这个是找到项目的配置文件，转换成输入流
        InputStream resourceAsStream = Resources.getResourceAsStream("sqlMapConfig.xml");
        //解析输入流
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);
        SqlSession sqlSession = sqlSessionFactory.openSession(true);
        //代理方式放入对应class
        //由于是代理方式，所以UserMapper.xml的namespace是这个UserMapper类的路径,sqlMapConfig.xml对应的路径也是这个UserMapper类的路径
        userMapper = sqlSession.getMapper(UserMapper.class);
    }
3.下面可以做增删改查语句了